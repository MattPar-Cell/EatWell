import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { View, Text, TextInput, Button, FlatList, StyleSheet, Alert } from 'react-native';
import { initializeApp } from 'firebase/app';
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';

// Firebase configuration (replace with your own config)
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

// Navigation Stack
const Stack = createStackNavigator();

// Mock BMR and TDEE calculation
const calculateBMR = (age, weight, height, gender) => {
  if (gender === 'male') {
    return 10 * weight + 6.25 * height - 5 * age + 5;
  } else {
    return 10 * weight + 6.25 * height - 5 * age - 161;
  }
};

const calculateTDEE = (bmr, activityLevel) => {
  const activityFactors = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    active: 1.725,
    veryActive: 1.9
  };
  return bmr * (activityFactors[activityLevel] || 1.2);
};

// Mock meal plan data
const mockMealPlan = [
  { id: '1', name: 'Grilled Chicken Salad', macros: { calories: 400, protein: 30, carbs: 20, fat: 15 }, prepTime: '20 mins' },
  { id: '2', name: 'Salmon with Quinoa', macros: { calories: 500, protein: 35, carbs: 40, fat: 20 }, prepTime: '30 mins' },
];

// Mock shopping list
const mockShoppingList = ['Chicken', 'Lettuce', 'Salmon', 'Quinoa', 'Olive Oil'];

// Login Screen
const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = () => {
    signInWithEmailAndPassword(auth, email, password)
      .then(() => navigation.navigate('Onboarding'))
      .catch(error => Alert.alert('Login Error', error.message));
  };

  const handleSignUp = () => {
    createUserWithEmailAndPassword(auth, email, password)
      .then(() => navigation.navigate('Onboarding'))
      .catch(error => Alert.alert('Sign Up Error', error.message));
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>EatWell</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Login" onPress={handleLogin} />
      <Button title="Sign Up" onPress={handleSignUp} />
    </View>
  );
};

// Onboarding Screen
const OnboardingScreen = ({ navigation }) => {
  const [step, setStep] = useState(1);
  const [userData, setUserData] = useState({
    age: '',
    weight: '',
    height: '',
    gender: '',
    activityLevel: '',
    goal: ''
  });

  const handleNext = () => {
    if (step < 5) {
      setStep(step + 1);
    } else {
      // Calculate BMR and TDEE
      const bmr = calculateBMR(
        parseInt(userData.age),
        parseFloat(userData.weight),
        parseFloat(userData.height),
        userData.gender
      );
      const tdee = calculateTDEE(bmr, userData.activityLevel);
      navigation.navigate('Dashboard', { tdee, userData });
    }
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <>
            <Text>Step 1: Age</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter your age"
              value={userData.age}
              onChangeText={text => setUserData({ ...userData, age: text })}
              keyboardType="numeric"
            />
          </>
        );
      case 2:
        return (
          <>
            <Text>Step 2: Weight (kg)</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter your weight"
              value={userData.weight}
              onChangeText={text => setUserData({ ...userData, weight: text })}
              keyboardType="numeric"
            />
          </>
        );
      case 3:
        return (
          <>
            <Text>Step 3: Height (cm)</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter your height"
              value={userData.height}
              onChangeText={text => setUserData({ ...userData, height: text })}
              keyboardType="numeric"
            />
          </>
        );
      case 4:
        return (
          <>
            <Text>Step 4: Gender</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter gender (male/female)"
              value={userData.gender}
              onChangeText={text => setUserData({ ...userData, gender: text })}
            />
          </>
        );
      case 5:
        return (
          <>
            <Text>Step 5: Activity Level</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter activity level (sedentary/light/moderate/active/veryActive)"
              value={userData.activityLevel}
              onChangeText={text => setUserData({ ...userData, activityLevel: text })}
            />
            <Text>Goal</Text>
            <TextInput
              style={styles.input}
              placeholder="Enter goal (weightLoss/muscleGain/maintenance/endurance)"
              value={userData.goal}
              onChangeText={text => setUserData({ ...userData, goal: text })}
            />
          </>
        );
      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Onboarding - Step {step}</Text>
      {renderStep()}
      <Button title="Next" onPress={handleNext} />
    </View>
  );
};

// Dashboard Screen
const DashboardScreen = ({ route, navigation }) => {
  const { tdee, userData } = route.params;
  const [favorites, setFavorites] = useState([]);

  const toggleFavorite = (mealId) => {
    if (favorites.includes(mealId)) {
      setFavorites(favorites.filter(id => id !== mealId));
    } else {
      setFavorites([...favorites, mealId]);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Your Dashboard</Text>
      <Text>Daily Calorie Target: {Math.round(tdee)} kcal</Text>
      <Text>Goal: {userData.goal}</Text>
      
      <Text style={styles.subtitle}>Weekly Meal Plan</Text>
      <FlatList
        data={mockMealPlan}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <View style={styles.mealItem}>
            <Text>{item.name}</Text>
            <Text>Calories: {item.macros.calories} kcal</Text>
            <Text>Protein: {item.macros.protein}g, Carbs: {item.macros.carbs}g, Fat: {item.macros.fat}g</Text>
            <Text>Prep Time: {item.prepTime}</Text>
            <Button
              title={favorites.includes(item.id) ? 'Unfavorite' : 'Favorite'}
              onPress={() => toggleFavorite(item.id)}
            />
          </View>
        )}
      />

      <Text style={styles.subtitle}>Shopping List</Text>
      <FlatList
        data={mockShoppingList}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => <Text>{item}</Text>}
      />

      <Button title="Fridge Mode (Premium)" onPress={() => Alert.alert('Premium Feature', 'Fridge Mode coming soon!')} />
      <Button title="Macro Target Mode (Premium)" onPress={() => Alert.alert('Premium Feature', 'Macro Target Mode coming soon!')} />
      <Button title="Upgrade to Premium" onPress={() => Alert.alert('Premium', 'Upgrade via Stripe (coming soon)!')} />
    </View>
  );
};

// Main App
const App = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login">
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Onboarding" component={OnboardingScreen} />
        <Stack.Screen name="Dashboard" component={DashboardScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  mealItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
    marginBottom: 10,
  },
});

export default App;
